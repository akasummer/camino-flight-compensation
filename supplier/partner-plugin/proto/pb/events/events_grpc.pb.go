// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: events/events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyEventsService_Subscribe_FullMethodName = "/events.MyEventsService/Subscribe"
)

// MyEventsServiceClient is the client API for MyEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyEventsServiceClient interface {
	Subscribe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MyEventsService_SubscribeClient, error)
}

type myEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMyEventsServiceClient(cc grpc.ClientConnInterface) MyEventsServiceClient {
	return &myEventsServiceClient{cc}
}

func (c *myEventsServiceClient) Subscribe(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (MyEventsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyEventsService_ServiceDesc.Streams[0], MyEventsService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &myEventsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyEventsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type myEventsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *myEventsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyEventsServiceServer is the server API for MyEventsService service.
// All implementations must embed UnimplementedMyEventsServiceServer
// for forward compatibility
type MyEventsServiceServer interface {
	Subscribe(*emptypb.Empty, MyEventsService_SubscribeServer) error
	mustEmbedUnimplementedMyEventsServiceServer()
}

// UnimplementedMyEventsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMyEventsServiceServer struct {
}

func (UnimplementedMyEventsServiceServer) Subscribe(*emptypb.Empty, MyEventsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedMyEventsServiceServer) mustEmbedUnimplementedMyEventsServiceServer() {}

// UnsafeMyEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyEventsServiceServer will
// result in compilation errors.
type UnsafeMyEventsServiceServer interface {
	mustEmbedUnimplementedMyEventsServiceServer()
}

func RegisterMyEventsServiceServer(s grpc.ServiceRegistrar, srv MyEventsServiceServer) {
	s.RegisterService(&MyEventsService_ServiceDesc, srv)
}

func _MyEventsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyEventsServiceServer).Subscribe(m, &myEventsServiceSubscribeServer{stream})
}

type MyEventsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type myEventsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *myEventsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MyEventsService_ServiceDesc is the grpc.ServiceDesc for MyEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "events.MyEventsService",
	HandlerType: (*MyEventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _MyEventsService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "events/events.proto",
}
